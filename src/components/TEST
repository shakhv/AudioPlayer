
const Track = ({ track, playlist, player, setTrack, playTrack, pauseTrack }) => {
  let [_player, setPlayer] = useState()
  let [isPlay, setPlay] = useState(true)
  useEffect(() => setPlayer(player), [player])

  return (
    <li className={isPlay && _player?.isPlaying && _player.track?._id === track._id ? 'playlist__track highlightPaleGreen' : 'playlist__track'}>
      {isPlay && _player?.isPlaying && _player.track?._id === track._id ?
        <button 
          className='highlightYellow' 
          onClick={() => { pauseTrack(); setPlay(false) }}
        ><FontAwesomeIcon style={{pointerEvents:'none'}} icon={faPause} /></button> :
        <button
          className='highlightGreen'
          onClick={() => {
            if (track?._id !== _player?.track?._id) setTrack(track, playlist)
            playTrack()
            setPlay(true)
          }}
        ><FontAwesomeIcon style={{pointerEvents:'none'}} icon={faPlay} /></button>
      }
      <div>
        <small className='artist'>{track.id3.artist || 'Artist: unknown'}</small>
        <small className='album'>{track.id3.album || 'Album: unknown'}</small>
        <small className='title'>{track.id3.title || track.originalFileName}</small>
      </div>
    </li>
  )
}
const TrackConnect = connect(
  state => ({
    player: state.player || {},
  }),
  {
    setTrack: action.setTrack,
    pauseTrack: action.pauseTrack,
    playTrack: action.playTrack
  }
)(Track)

const SortableItem = sortableElement(TrackConnect);
const SortableContainer = sortableContainer(({ children }) => <ul>{children}</ul> );





















